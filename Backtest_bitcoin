import pyupbit
import pandas
import datetime
import time

access = "8qdX959Qzsfnr9RkusRsTQzhAfBCx518l6VlhIiI"          # 본인 값으로 변경
secret = "ToqSILTdJOxeMpYM9d9PJ5ZbAxjyOOkec3VpdN28"          # 본인 값으로 변경
upbit = pyupbit.Upbit(access, secret)

def rsi(ohlc: pandas.DataFrame, period: int = 14):
    delta = ohlc["close"].diff()
    ups, downs = delta.copy(), delta.copy()
    ups[ups < 0] = 0
    downs[downs > 0] = 0

    AU = ups.ewm(com = period-1, min_periods = period).mean()
    AD = downs.abs().ewm(com = period-1, min_periods = period).mean()
    RS = AU/AD

    return pandas.Series(100 - (100/(1 + RS)), name = "RSI")  

# 지정가 매수 함수 (RSI 33넘을 때 값 지정)
def buy(coin):
    # money = upbit.get_balance("KRW")
    ea = float(50000/now_price) #10만원씩 구매
    res = upbit.buy_limit_order(coin, now_price, ea)
    print(res)

# 지정가 전량 매도 함수 (RSI 70일때의 값 지정)
def sell(coin):
    amount = upbit.get_balance(coin)
    cur_price = pyupbit.get_current_price(coin)
    total = amount * cur_price
    res = upbit.sell_limit_order(coin, now_price, amount)

#볼린저밴드 계산
def bollinger_bands(ohlc: pandas.DataFrame, period: int = 20):
    rolling_mean = ohlc['close'].rolling(window=period).mean()
    rolling_std = ohlc['close'].rolling(window=period).std()
    upper_band = rolling_mean + (rolling_std * 2)
    lower_band = rolling_mean - (rolling_std * 2)
    return rolling_mean, upper_band, lower_band

coinlist = ["KRW-BTC", "KRW-XRP", "KRW-ZIL", "KRW-ARB", "KRW-DOGE", "KRW-SOL", "KRW-SAND", "KRW-ETH", "KRW-APT", "KRW-ETC", "KRW-STX", "KRW-STEEM", "KRW-MANA", "KRW-T", "KRW-HIVE"]

lower28 = []
higher70 = []

# 초기화
for i in range(len(coinlist)):
    lower28.append(False)
    higher70.append(False)
    
# timecheck = 1
# buycount = 0

# 코인별 OHLCV 데이터 가져오기
data = {}
for coin in coinlist:
    data[coin] = pyupbit.get_ohlcv(ticker=coin, interval="minute3")

for coin in coinlist:
    now_rsi = rsi(data[coin], 14).iloc[-1]
    print(now_rsi)
    now_price = data[coin]['close'].iloc[-1]
    rolling_mean, upper_band, lower_band = bollinger_bands(data[coin], 20)
    balance2 = upbit.get_avg_buy_price(coin.split("-")[1])
    if balance2 == 0:
        rate_of_return = 0
    else:
        rate_of_return = (now_price - balance2) / (balance2) * 100
        
    if now_rsi <= 28 and now_price < lower_band[-1]:
        lower28[coinlist.index(coin)] = True
    elif now_rsi >= 33 and lower28[coinlist.index(coin)]:
        buy(coin)
        lower28[coinlist.index(coin)] = False
    elif rate_of_return > 2 and rate_of_return < 50:
        sell(coin)
        higher70[coinlist.index(coin)] = True
    elif rate_of_return < -6 and rate_of_return > -10:
        sell(coin)
        higher70[coinlist.index(coin)] = True
    elif now_rsi >= 70 and not higher70[coinlist.index(coin)]:
        sell(coin)
        higher70[coinlist.index(coin)] = True
    elif now_rsi <= 60:
        higher70[coinlist.index(coin)] = False
    print("1")

# # 코인별 데이터 업데이트
# for coin in coinlist:
#     data[coin] = data[coin].iloc[1:, :]
#     current_data = pyupbit.get_ohlcv(ticker=coin, interval="minute3").iloc[-1]
#     data[coin] = data[coin]._append(current_data)
# time.sleep(1)

